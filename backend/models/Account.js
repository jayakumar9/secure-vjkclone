const mongoose = require('mongoose');
const crypto = require('crypto');

const accountSchema = new mongoose.Schema({
  serialNumber: {
    type: Number,
    unique: true
  },
  website: {
    type: String,
    required: [true, 'Please add a website'],
    trim: true
  },
  name: {
    type: String,
    required: [true, 'Please add a name'],
    trim: true
  },
  username: {
    type: String,
    required: [true, 'Please add a username'],
    trim: true
  },
  email: {
    type: String,
    required: [true, 'Please add an email'],
    match: [
      /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,
      'Please add a valid email'
    ]
  },
  password: {
    type: String,
    required: [true, 'Please add a password'],
    minlength: 6
  },
  isPasswordVisible: {
    type: Boolean,
    default: false
  },
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  logo: {
    type: String,
    default: ''
  },
  attachedFile: {
    type: String
  },
  note: {
    type: String,
    trim: true
  },
  user: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// Static method to generate a strong password
accountSchema.statics.generateStrongPassword = function() {
  const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';
  const numberChars = '0123456789';
  const specialChars = '!@#$%^&*()_+-=[]{}|;:,.<>?';
  
  const allChars = uppercaseChars + lowercaseChars + numberChars + specialChars;
  const length = 16; // Generate a 16-character password
  
  let password = '';
  
  // Ensure at least one character from each category
  password += uppercaseChars[Math.floor(Math.random() * uppercaseChars.length)];
  password += lowercaseChars[Math.floor(Math.random() * lowercaseChars.length)];
  password += numberChars[Math.floor(Math.random() * numberChars.length)];
  password += specialChars[Math.floor(Math.random() * specialChars.length)];
  
  // Fill the rest with random characters
  for (let i = password.length; i < length; i++) {
    password += allChars[Math.floor(Math.random() * allChars.length)];
  }
  
  // Shuffle the password
  password = password.split('').sort(() => Math.random() - 0.5).join('');
  
  return password;
};

// Compound unique index for username and website
accountSchema.index({ username: 1, website: 1 }, { unique: true });

// Compound unique index for email and website
accountSchema.index({ email: 1, website: 1 }, { unique: true });

// Auto-increment serialNumber with better error handling
accountSchema.pre('save', async function(next) {
  try {
    if (this.isNew) {
      const lastAccount = await this.constructor.findOne({}, {}, { sort: { 'serialNumber': -1 } });
      this.serialNumber = lastAccount ? lastAccount.serialNumber + 1 : 1;
    }
    next();
  } catch (error) {
    console.error('Error generating serialNumber:', error);
    next(error);
  }
});

module.exports = mongoose.model('Account', accountSchema); 